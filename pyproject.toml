[project]
name = "veritas-ai-extension"
version = "1.0.0"
description = "Extensão de navegador para verificação de confiabilidade de informações usando IA"
authors = [
    { name = "VeritasAI Team", email = "team@veritas-ai.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["fact-check", "ai", "misinformation", "verification", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    # Core dependencies for testing and utilities
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.3.1",
    "pytest-html>=3.2.0",
    "pytest-benchmark>=4.0.0",
    "pytest-httpx>=0.21.0",
    "pytest-vcr>=1.0.2",
    
    # HTTP and API testing
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    
    # Data processing and validation
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    
    # Development tools
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pre-commit>=3.4.0",
]

[project.optional-dependencies]
dev = [
    # Additional development dependencies
    "ipython>=8.15.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
    
    # Performance profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    
    # Additional testing tools
    "coverage[toml]>=7.3.0",
    "tox>=4.11.0",
]

test = [
    "pytest-timeout>=2.1.0",
    "pytest-randomly>=3.15.0",
    "pytest-sugar>=0.9.7",
    "pytest-clarity>=1.0.1",
    "factory-boy>=3.3.0",
    "faker>=19.6.0",
]

lint = [
    "ruff>=0.0.290",
    "pylint>=2.17.0",
    "vulture>=2.9.0",
    "safety>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/your-username/veritas-ai-extension"
Repository = "https://github.com/your-username/veritas-ai-extension.git"
Documentation = "https://github.com/your-username/veritas-ai-extension/wiki"
"Bug Tracker" = "https://github.com/your-username/veritas-ai-extension/issues"

[project.scripts]
veritas-test = "scripts.test_runner:main"
veritas-setup = "scripts.setup_python:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=90",
    "--strict-markers",
    "--disable-warnings",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "api: Tests requiring external APIs",
    "fact_check: Google Fact Check API tests",
    "llm: Groq LLM API tests",
    "qdrant: Qdrant database tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
