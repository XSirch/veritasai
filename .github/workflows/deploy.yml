name: Deploy

on:
  push:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        type: boolean
        default: false

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    
    steps:
    - name: Determine deployment environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          SHOULD_DEPLOY=true
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENVIRONMENT="production"
          SHOULD_DEPLOY=true
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          ENVIRONMENT="staging"
          SHOULD_DEPLOY=true
        elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          ENVIRONMENT="staging"
          SHOULD_DEPLOY=true
        else
          ENVIRONMENT="none"
          SHOULD_DEPLOY=false
        fi
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        
        echo "Environment: $ENVIRONMENT"
        echo "Should deploy: $SHOULD_DEPLOY"
        
  pre-deploy-checks:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.15.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
        
    - name: Run tests
      if: github.event.inputs.force_deploy != 'true'
      run: npm run test:all
      env:
        NODE_ENV: test
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        
    - name: Run quality gates
      if: github.event.inputs.force_deploy != 'true'
      run: |
        echo "Running quality gates for ${{ needs.determine-environment.outputs.environment }} deployment..."
        
        # Run linting
        npm run lint
        
        # Check security
        npm audit --audit-level=high
        
        echo "‚úÖ Pre-deploy checks passed!"
        
  build-for-deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deploy-checks]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set environment variables
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        if [ "$ENVIRONMENT" = "production" ]; then
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "BUILD_ENV=production" >> $GITHUB_ENV
          echo "API_BASE_URL=https://api.veritasai.com" >> $GITHUB_ENV
        elif [ "$ENVIRONMENT" = "staging" ]; then
          echo "NODE_ENV=staging" >> $GITHUB_ENV
          echo "BUILD_ENV=staging" >> $GITHUB_ENV
          echo "API_BASE_URL=https://staging-api.veritasai.com" >> $GITHUB_ENV
        fi
        
    - name: Build extension
      run: npm run build:${{ needs.determine-environment.outputs.environment }}
      env:
        NODE_ENV: ${{ env.NODE_ENV }}
        BUILD_ENV: ${{ env.BUILD_ENV }}
        API_BASE_URL: ${{ env.API_BASE_URL }}
        
    - name: Create deployment package
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
        
        cd dist
        zip -r ../veritasai-$ENVIRONMENT-$TIMESTAMP-$COMMIT_SHA.zip .
        cd ..
        
        echo "PACKAGE_NAME=veritasai-$ENVIRONMENT-$TIMESTAMP-$COMMIT_SHA.zip" >> $GITHUB_ENV
        
        echo "Created deployment package: $PACKAGE_NAME"
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-${{ needs.determine-environment.outputs.environment }}
        path: ${{ env.PACKAGE_NAME }}
        retention-days: 30
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-for-deploy]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package-staging
        
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Extract package
        unzip -q veritasai-staging-*.zip -d staging-deploy/
        
        # Validate deployment package
        if [ ! -f staging-deploy/manifest.json ]; then
          echo "‚ùå Invalid deployment package - manifest.json not found"
          exit 1
        fi
        
        # Here you would typically:
        # 1. Upload to staging Chrome Web Store account
        # 2. Deploy to staging infrastructure
        # 3. Update staging database
        # 4. Run smoke tests
        
        echo "üì¶ Package contents:"
        ls -la staging-deploy/
        
        echo "üìã Manifest info:"
        cat staging-deploy/manifest.json | jq '.name, .version'
        
        # Simulate deployment
        echo "‚úÖ Staging deployment completed successfully!"
        
        # Set deployment URL for later steps
        echo "DEPLOYMENT_URL=https://staging.veritasai.com" >> $GITHUB_ENV
        
    - name: Run post-deploy tests
      run: |
        echo "üß™ Running post-deployment tests..."
        
        # Here you would run smoke tests against the deployed staging environment
        # For example:
        # - Check if extension loads properly
        # - Test basic functionality
        # - Verify API connectivity
        
        echo "‚úÖ Post-deploy tests passed!"
        
    - name: Update staging status
      run: |
        echo "üìä Updating staging deployment status..."
        
        # Here you could update deployment tracking systems
        # Send notifications to team
        # Update status dashboards
        
        echo "‚úÖ Staging status updated!"
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-for-deploy]
    if: needs.determine-environment.outputs.environment == 'production'
    environment: production
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package-production
        
    - name: Pre-production validation
      run: |
        echo "üîç Running pre-production validation..."
        
        # Extract and validate package
        unzip -q veritasai-production-*.zip -d production-deploy/
        
        # Validate manifest
        if [ ! -f production-deploy/manifest.json ]; then
          echo "‚ùå Invalid deployment package"
          exit 1
        fi
        
        # Check version
        VERSION=$(cat production-deploy/manifest.json | jq -r '.version')
        echo "Deploying version: $VERSION"
        
        # Validate required files
        required_files=("background.js" "content.js" "popup.html")
        for file in "${required_files[@]}"; do
          if [ ! -f "production-deploy/$file" ]; then
            echo "‚ùå Required file $file not found"
            exit 1
          fi
        done
        
        echo "‚úÖ Pre-production validation passed!"
        
    - name: Deploy to Chrome Web Store
      run: |
        echo "üöÄ Deploying to Chrome Web Store..."
        
        # Install chrome-webstore-upload-cli
        npm install -g chrome-webstore-upload-cli
        
        # Note: In a real scenario, you would use actual secrets
        # webstore upload --source production-deploy \
        #   --extension-id ${{ secrets.CHROME_EXTENSION_ID }} \
        #   --client-id ${{ secrets.CHROME_CLIENT_ID }} \
        #   --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} \
        #   --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }} \
        #   --auto-publish
        
        echo "üì¶ Package uploaded to Chrome Web Store"
        echo "‚è≥ Waiting for review process..."
        
        # Simulate successful upload
        echo "‚úÖ Chrome Web Store deployment initiated!"
        
    - name: Deploy to production infrastructure
      run: |
        echo "üöÄ Deploying to production infrastructure..."
        
        # Here you would deploy supporting infrastructure:
        # - API servers
        # - Databases
        # - CDN updates
        # - Documentation sites
        
        echo "‚úÖ Production infrastructure updated!"
        
    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        
        # Critical production tests
        # - API health checks
        # - Database connectivity
        # - External service integrations
        
        echo "‚úÖ Production smoke tests passed!"
        
    - name: Update production status
      run: |
        echo "üìä Updating production deployment status..."
        
        # Update monitoring systems
        # Send success notifications
        # Update status pages
        
        echo "‚úÖ Production deployment completed successfully!"
        
  post-deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-staging, deploy-production]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
    - name: Deployment summary
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        if [ "$ENVIRONMENT" = "staging" ]; then
          DEPLOY_STATUS="${{ needs.deploy-staging.result }}"
        elif [ "$ENVIRONMENT" = "production" ]; then
          DEPLOY_STATUS="${{ needs.deploy-production.result }}"
        fi
        
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Environment: $ENVIRONMENT"
        echo "Status: $DEPLOY_STATUS"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Timestamp: $(date -u)"
        
        if [ "$DEPLOY_STATUS" = "success" ]; then
          echo ""
          echo "‚úÖ Deployment completed successfully!"
          
          if [ "$ENVIRONMENT" = "production" ]; then
            echo "üåê Extension will be available in Chrome Web Store after review"
            echo "üì± Users will receive automatic updates"
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "üß™ Staging environment updated for testing"
          fi
        else
          echo ""
          echo "‚ùå Deployment failed!"
          echo "üîß Please check the logs and fix any issues"
        fi
        
    - name: Notify team
      if: always()
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        if [ "$ENVIRONMENT" = "staging" ]; then
          DEPLOY_STATUS="${{ needs.deploy-staging.result }}"
        elif [ "$ENVIRONMENT" = "production" ]; then
          DEPLOY_STATUS="${{ needs.deploy-production.result }}"
        fi
        
        # Here you would send notifications:
        # - Slack/Discord messages
        # - Email notifications
        # - Update issue trackers
        
        echo "üì¢ Team notified of deployment status: $DEPLOY_STATUS"
