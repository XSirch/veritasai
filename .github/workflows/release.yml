name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          # Check if it's a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "Release version: $VERSION"
        echo "Is prerelease: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check semantic versioning format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Error: Version $VERSION does not follow semantic versioning"
          exit 1
        fi
        
        echo "Version format is valid"
        
    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check if tag already exists
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Error: Tag v$VERSION already exists"
          exit 1
        fi
        
        echo "Version is unique"
        
  build-release:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Update version in package.json
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        npm version $VERSION --no-git-tag-version
        
    - name: Update version in manifest.json
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('src/manifest.json', 'utf8'));
          manifest.version = '$VERSION';
          fs.writeFileSync('src/manifest.json', JSON.stringify(manifest, null, 2));
          console.log('Updated manifest.json to version $VERSION');
        "
        
    - name: Run tests
      run: npm run test:all
      
    - name: Build production extension
      run: npm run build:production
      env:
        NODE_ENV: production
        BUILD_ENV: production
        
    - name: Create release package
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        cd dist
        zip -r ../veritasai-v$VERSION.zip .
        cd ..
        
        # Create source code package
        git archive --format=zip --prefix=veritasai-v$VERSION-source/ HEAD > veritasai-v$VERSION-source.zip
        
        echo "Created packages:"
        ls -la *.zip
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "Generating changelog since $LAST_TAG"
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "No previous tag found, generating changelog from all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
        fi
        
        # Create changelog file
        cat > CHANGELOG.md << EOF
        # VeritasAI v$VERSION
        
        ## Changes
        $CHANGELOG
        
        ## Installation
        1. Download the \`veritasai-v$VERSION.zip\` file
        2. Extract the contents
        3. Load the extension in Chrome Developer Mode
        
        ## Technical Details
        - Build: ${{ github.sha }}
        - Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Node.js: $(node --version)
        - NPM: $(npm --version)
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          veritasai-v${{ needs.validate-release.outputs.version }}.zip
          veritasai-v${{ needs.validate-release.outputs.version }}-source.zip
          CHANGELOG.md
          
  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: VeritasAI v${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        files: |
          veritasai-v${{ needs.validate-release.outputs.version }}.zip
          veritasai-v${{ needs.validate-release.outputs.version }}-source.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: needs.validate-release.outputs.is_prerelease == 'true'
    
    steps:
    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        
    - name: Deploy to staging
      run: |
        echo "Deploying v${{ needs.validate-release.outputs.version }} to staging..."
        
        # Here you would typically deploy to a staging environment
        # For example, upload to a staging Chrome Web Store account
        # or deploy to internal testing infrastructure
        
        echo "Staging deployment completed"
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: production
    
    steps:
    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        
    - name: Deploy to Chrome Web Store
      run: |
        echo "Deploying v${{ needs.validate-release.outputs.version }} to Chrome Web Store..."
        
        # Install chrome-webstore-upload-cli
        npm install -g chrome-webstore-upload-cli
        
        # Upload to Chrome Web Store (requires secrets)
        # webstore upload --source veritasai-v${{ needs.validate-release.outputs.version }}.zip \
        #   --extension-id ${{ secrets.CHROME_EXTENSION_ID }} \
        #   --client-id ${{ secrets.CHROME_CLIENT_ID }} \
        #   --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} \
        #   --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}
        
        echo "Production deployment completed"
        
    - name: Update documentation
      run: |
        echo "ðŸ“š Updating documentation for v${{ needs.validate-release.outputs.version }}..."
        
        # Here you could update documentation, website, etc.
        
        echo "Documentation updated"
        
  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, create-github-release, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-github-release.result == 'success'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
        
        if [ "$IS_PRERELEASE" = "true" ]; then
          echo "Pre-release v$VERSION created successfully!"
          echo "Available at: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
        else
          echo "Release v$VERSION created and deployed successfully!"
          echo "Available at: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo "Chrome Web Store: (link will be available after review)"
        fi
        
    - name: Notify failure
      if: needs.build-release.result == 'failure' || needs.create-github-release.result == 'failure'
      run: |
        echo "Release process failed!"
        exit 1
