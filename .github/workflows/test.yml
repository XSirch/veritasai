name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.15.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
        
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        # API keys for testing (use secrets in real scenarios)
        GOOGLE_FACT_CHECK_API_KEY: ${{ secrets.GOOGLE_FACT_CHECK_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        
    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        
  test-e2e:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.15.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
        
    - name: Build extension
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        GOOGLE_FACT_CHECK_API_KEY: ${{ secrets.GOOGLE_FACT_CHECK_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
          
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: npx audit-ci --moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Check for unused dependencies
      run: npx depcheck
      
    - name: Validate package.json
      run: npx package-json-validator package.json
      
    - name: Check bundle size
      run: npm run analyze:bundle
      
  notify:
    runs-on: ubuntu-latest
    needs: [test, test-e2e, security-scan, quality-check]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.test-e2e.result == 'success' && needs.security-scan.result == 'success' && needs.quality-check.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.test-e2e.result == 'failure' || needs.security-scan.result == 'failure' || needs.quality-check.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        exit 1
