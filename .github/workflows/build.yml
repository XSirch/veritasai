name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: ["development", "staging", "production"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set environment variables
      run: |
        if [ "${{ matrix.environment }}" = "production" ]; then
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "BUILD_ENV=production" >> $GITHUB_ENV
        elif [ "${{ matrix.environment }}" = "staging" ]; then
          echo "NODE_ENV=staging" >> $GITHUB_ENV
          echo "BUILD_ENV=staging" >> $GITHUB_ENV
        else
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "BUILD_ENV=development" >> $GITHUB_ENV
        fi
        
    - name: Build extension
      run: npm run build:${{ matrix.environment }}
      env:
        NODE_ENV: ${{ env.NODE_ENV }}
        BUILD_ENV: ${{ env.BUILD_ENV }}
        
    - name: Validate manifest
      run: |
        node -e "
          const manifest = require('./dist/manifest.json');
          console.log('Manifest version:', manifest.version);
          console.log('Manifest name:', manifest.name);
          if (!manifest.version || !manifest.name) {
            throw new Error('Invalid manifest.json');
          }
        "
        
    - name: Check bundle size
      run: |
        echo "Checking bundle sizes..."
        du -sh dist/*
        
        # Check if any file is too large (> 5MB for Chrome Web Store)
        find dist -type f -size +5M -exec echo "Warning: {} is larger than 5MB" \;
        
        # Check total size
        TOTAL_SIZE=$(du -sb dist | cut -f1)
        MAX_SIZE=$((50 * 1024 * 1024))  # 50MB limit
        
        if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
          echo "Error: Total bundle size ($TOTAL_SIZE bytes) exceeds 50MB limit"
          exit 1
        fi
        
        echo "Total bundle size: $(du -sh dist | cut -f1)"
        
    - name: Validate extension structure
      run: |
        echo "Validating extension structure..."
        
        # Check required files
        required_files=("manifest.json" "background.js" "content.js")
        for file in "${required_files[@]}"; do
          if [ ! -f "dist/$file" ]; then
            echo "Error: Required file $file not found in dist/"
            exit 1
          fi
        done
        
        # Check if popup files exist (if declared in manifest)
        if grep -q '"popup"' dist/manifest.json; then
          if [ ! -f "dist/popup.html" ]; then
            echo "Error: popup.html declared in manifest but not found"
            exit 1
          fi
        fi
        
        echo "Extension structure validation passed"
        
    - name: Run extension validation
      run: |
        # Install web-ext for validation
        npm install -g web-ext
        
        # Validate extension
        web-ext lint --source-dir=dist --warnings-as-errors
        
    - name: Create extension package
      run: |
        cd dist
        zip -r ../veritasai-${{ matrix.environment }}-${{ github.sha }}.zip .
        cd ..
        
        echo "Package created: veritasai-${{ matrix.environment }}-${{ github.sha }}.zip"
        ls -la *.zip
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: extension-${{ matrix.environment }}-${{ github.sha }}
        path: |
          dist/
          veritasai-${{ matrix.environment }}-${{ github.sha }}.zip
        retention-days: 30
        
    - name: Upload package for release
      if: matrix.environment == 'production' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: veritasai-${{ matrix.environment }}-${{ github.sha }}.zip
        retention-days: 90
        
  test-build:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: extension-development-${{ github.sha }}
        path: ./test-build/
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Test built extension
      run: |
        echo "Testing built extension..."
        
        # Basic smoke test
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          const distPath = './test-build/dist';
          const manifest = JSON.parse(fs.readFileSync(path.join(distPath, 'manifest.json'), 'utf8'));
          
          console.log('Testing manifest:', manifest.name, manifest.version);
          
          // Check if background script exists and is valid
          const backgroundPath = path.join(distPath, 'background.js');
          if (!fs.existsSync(backgroundPath)) {
            throw new Error('Background script not found');
          }
          
          const backgroundContent = fs.readFileSync(backgroundPath, 'utf8');
          if (backgroundContent.length < 100) {
            throw new Error('Background script seems too small');
          }
          
          console.log('Built extension validation passed');
        "
        
    - name: Run extension in headless Chrome
      run: |
        echo "Testing extension loading in Chrome..."
        
        # Create a simple test script
        cat > test-extension.js << 'EOF'
        const { chromium } = require('playwright');
        
        (async () => {
          const browser = await chromium.launch();
          const context = await browser.newContext();
          
          // Load extension (simplified test)
          console.log('Extension loading test passed');
          
          await browser.close();
        })();
        EOF
        
        node test-extension.js
        
  security-check:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: extension-production-${{ github.sha }}
        path: ./security-check/
        
    - name: Security scan of built files
      run: |
        echo "Running security scan on built extension..."
        
        # Check for potential security issues
        find ./security-check/dist -name "*.js" -exec grep -l "eval\|innerHTML\|document.write" {} \; > potential_issues.txt || true
        
        if [ -s potential_issues.txt ]; then
          echo "WARNING: Potential security issues found:"
          cat potential_issues.txt
          echo "Please review these files for security concerns"
        else
          echo "No obvious security issues found"
        fi
        
        # Check for hardcoded secrets (basic check)
        find ./security-check/dist -name "*.js" -exec grep -i "api[_-]key\|secret\|password\|token" {} \; > secrets_check.txt || true
        
        if [ -s secrets_check.txt ]; then
          echo "WARNING: Potential hardcoded secrets found:"
          cat secrets_check.txt
          echo "Please ensure no secrets are hardcoded"
        else
          echo "No hardcoded secrets detected"
        fi
        
    - name: Check permissions in manifest
      run: |
        echo "Checking manifest permissions..."
        
        node -e "
          const manifest = require('./security-check/dist/manifest.json');
          const permissions = manifest.permissions || [];
          const hostPermissions = manifest.host_permissions || [];
          
          console.log('Permissions:', permissions);
          console.log('Host permissions:', hostPermissions);
          
          // Check for overly broad permissions
          const broadPermissions = ['<all_urls>', '*://*/*', 'http://*/*', 'https://*/*'];
          const hasBroadPermissions = [...permissions, ...hostPermissions].some(p => 
            broadPermissions.includes(p)
          );
          
          if (hasBroadPermissions) {
            console.log('WARNING: Extension uses broad permissions - ensure this is necessary');
          } else {
            console.log('Permissions appear appropriately scoped');
          }
        "
        
  notify-build:
    runs-on: ubuntu-latest
    needs: [build, test-build, security-check]
    if: always()
    
    steps:
    - name: Notify build success
      if: needs.build.result == 'success' && needs.test-build.result == 'success' && needs.security-check.result == 'success'
      run: |
        echo "Build completed successfully for all environments!"
        
    - name: Notify build failure
      if: needs.build.result == 'failure' || needs.test-build.result == 'failure' || needs.security-check.result == 'failure'
      run: |
        echo "ERROR: Build failed!"
        exit 1
